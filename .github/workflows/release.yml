name: Release and Publish

on:
  push:
    branches:
      - master
  workflow_dispatch:

env:
  NPM_CONFIG_PROVENANCE: true
  NX_MAX_WORKERS: 4

defaults:
  run:
    shell: bash

jobs:
  # Job 1: Setup and determine if release is needed
  check-release:
    runs-on: ubuntu-latest
    # Skip if this push was made by github-actions (prevents infinite loop)
    if: "!contains(github.event.head_commit.message, '[skip ci]') && github.actor != 'github-actions[bot]'"
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
      previous_tag: ${{ steps.previous_tag.outputs.previous_tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fetch tags
        run: git fetch --tags --force

      - name: Get previous tag
        id: previous_tag
        run: |
          # Get the latest release tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 --match="release/*" 2>/dev/null || echo "")
          echo "previous_tag=$PREVIOUS_TAG" >> $GITHUB_OUTPUT
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "Previous tag: $PREVIOUS_TAG"
          else
            echo "No previous tag found"
          fi

      - name: Check if release needed
        id: check
        run: |
          # Check if there are releasable commits since last tag
          if [ -n "${{ steps.previous_tag.outputs.previous_tag }}" ]; then
            COMMITS=$(git log ${{ steps.previous_tag.outputs.previous_tag }}..HEAD --oneline --grep="^feat\|^fix\|^BREAKING CHANGE" || echo "")
          else
            COMMITS=$(git log --oneline --grep="^feat\|^fix\|^BREAKING CHANGE" || echo "")
          fi

          if [ -n "$COMMITS" ]; then
            echo "should_release=true" >> $GITHUB_OUTPUT
            echo "Found releasable commits"
          else
            echo "should_release=false" >> $GITHUB_OUTPUT
            echo "No releasable commits found"
          fi

  # Job 2: Release (version, build, changelog, GitHub release, and npm publish)
  release:
    runs-on: ubuntu-latest
    needs: check-release
    if: needs.check-release.outputs.should_release == 'true'
    permissions:
      contents: write
      id-token: write
    outputs:
      new_version: ${{ steps.release.outputs.new_version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.RELEASE_PAT }}

      - uses: pnpm/action-setup@v4
        with:
          version: 10

      - uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'
          registry-url: 'https://${{ vars.NPM_REGISTRY }}'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run nx release (version, build, GitHub release, and publish)
        id: release
        env:
          HUSKY: 0
          GITHUB_TOKEN: ${{ secrets.RELEASE_PAT }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_ACCESS_TOKEN }}
        run: |
          # Run nx release with everything in one command (--yes to skip prompts)
          npx nx release --yes

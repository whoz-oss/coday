name: Release and Publish

on:
  push:
    branches:
      - master
  workflow_dispatch:

env:
  NPM_CONFIG_PROVENANCE: true
  NX_MAX_WORKERS: 4

defaults:
  run:
    shell: bash

jobs:
  # Job 1: Setup and determine if release is needed
  check-release:
    runs-on: ubuntu-latest
    # Skip if this push was made by github-actions (prevents infinite loop)
    if: "!contains(github.event.head_commit.message, '[skip ci]') && github.actor != 'github-actions[bot]'"
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
      previous_tag: ${{ steps.previous_tag.outputs.previous_tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fetch tags
        run: git fetch --tags --force

      - name: Get previous tag
        id: previous_tag
        run: |
          # Get the latest release tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 --match="release/*" 2>/dev/null || echo "")
          echo "previous_tag=$PREVIOUS_TAG" >> $GITHUB_OUTPUT
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "Previous tag: $PREVIOUS_TAG"
          else
            echo "No previous tag found"
          fi

      - name: Check if release needed
        id: check
        run: |
          # Check if there are releasable commits since last tag
          if [ -n "${{ steps.previous_tag.outputs.previous_tag }}" ]; then
            COMMITS=$(git log ${{ steps.previous_tag.outputs.previous_tag }}..HEAD --oneline --grep="^feat\|^fix\|^BREAKING CHANGE" || echo "")
          else
            COMMITS=$(git log --oneline --grep="^feat\|^fix\|^BREAKING CHANGE" || echo "")
          fi

          if [ -n "$COMMITS" ]; then
            echo "should_release=true" >> $GITHUB_OUTPUT
            echo "Found releasable commits"
          else
            echo "should_release=false" >> $GITHUB_OUTPUT
            echo "No releasable commits found"
          fi

  # Job 2: Release (version, build, changelog, GitHub release, and npm publish)
  release:
    runs-on: ubuntu-latest
    needs: check-release
    if: needs.check-release.outputs.should_release == 'true'
    permissions:
      contents: write
      id-token: write
    outputs:
      new_version: ${{ steps.release.outputs.new_version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.RELEASE_PAT }}

      - uses: pnpm/action-setup@v4
        with:
          version: 10

      - uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'
          registry-url: 'https://${{ vars.NPM_REGISTRY }}'

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git config pull.rebase true

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run nx release (version, build, GitHub release, and publish)
        id: release
        env:
          HUSKY: 0
          GITHUB_TOKEN: ${{ secrets.RELEASE_PAT }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_ACCESS_TOKEN }}
        run: |
          npx nx release --yes
          # Capture the new version for desktop build
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

  # Job 3: Build and upload desktop app
  desktop-release:
    runs-on: macos-latest
    needs: release
    if: needs.release.outputs.new_version != ''
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          ref: master
          fetch-depth: 0

      - uses: pnpm/action-setup@v4
        with:
          version: 10

      - uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Import Code Signing Certificate
        env:
          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
          MACOS_CERT_PASSWORD: ${{ secrets.MACOS_CERT_PASSWORD }}
        run: |
          # Create a temporary keychain
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          KEYCHAIN_PASSWORD=$(openssl rand -base64 32)
          
          # Decode certificate from base64
          echo "$MACOS_CERTIFICATE" | base64 --decode > $RUNNER_TEMP/certificate.p12
          
          # Create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          security set-keychain-settings -lut 21600 "$KEYCHAIN_PATH"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          
          # Import certificate to keychain
          security import $RUNNER_TEMP/certificate.p12 \
            -k "$KEYCHAIN_PATH" \
            -P "$MACOS_CERT_PASSWORD" \
            -T /usr/bin/codesign \
            -T /usr/bin/productsign
          
          # Set keychain for codesign to use
          security list-keychain -d user -s "$KEYCHAIN_PATH"
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          
          # Verify certificate is available
          security find-identity -v -p codesigning "$KEYCHAIN_PATH"

      - name: Build and Sign Desktop App
        env:
          CSC_NAME: "Developer ID Application: BIZNET.IO (7DPGXLTDQS)"
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          npx nx run desktop:build-all
          npx nx run desktop:package-dist

      - name: Cleanup Keychain
        if: always()
        run: |
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          if [ -f "$KEYCHAIN_PATH" ]; then
            security delete-keychain "$KEYCHAIN_PATH"
          fi
          rm -f $RUNNER_TEMP/certificate.p12

      - name: Upload DMG to GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_PAT }}
        run: |
          VERSION="${{ needs.release.outputs.new_version }}"
          TAG="release/${VERSION}"
          DMG_PATH=$(find apps/desktop/release -name "*.dmg" -type f)
          
          if [ -z "$DMG_PATH" ]; then
            echo "Error: DMG file not found"
            exit 1
          fi
          
          echo "Uploading $DMG_PATH to release $TAG"
          gh release upload "$TAG" "$DMG_PATH" --clobber

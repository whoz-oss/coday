name: Test Desktop App Signing

on:
  workflow_dispatch:
    inputs:
      skip_notarization:
        description: 'Skip notarization (faster, for testing certificate only)'
        required: false
        type: boolean
        default: false

env:
  NX_MAX_WORKERS: 4

defaults:
  run:
    shell: bash

jobs:
  test-desktop-signing:
    runs-on: macos-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        with:
          version: 10

      - uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Import Code Signing Certificate
        env:
          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
          MACOS_CERT_PASSWORD: ${{ secrets.MACOS_CERT_PASSWORD }}
        run: |
          echo "🔐 Setting up code signing certificate..."

          # Create a temporary keychain
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          KEYCHAIN_PASSWORD=$(openssl rand -base64 32)

          echo "📝 Decoding certificate..."
          # Decode certificate from base64
          echo "$MACOS_CERTIFICATE" | base64 --decode > $RUNNER_TEMP/certificate.p12

          echo "🔑 Creating temporary keychain..."
          # Create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          security set-keychain-settings -lut 21600 "$KEYCHAIN_PATH"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"

          echo "📦 Importing certificate to keychain..."
          # Import certificate to keychain
          security import $RUNNER_TEMP/certificate.p12 \
            -k "$KEYCHAIN_PATH" \
            -P "$MACOS_CERT_PASSWORD" \
            -T /usr/bin/codesign \
            -T /usr/bin/productsign

          # Set keychain for codesign to use
          security list-keychain -d user -s "$KEYCHAIN_PATH"
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"

          echo "✅ Certificate imported successfully!"
          echo ""
          echo "📋 Available signing identities:"
          security find-identity -v -p codesigning "$KEYCHAIN_PATH"

      - name: Sign Desktop App (with notarization)
        if: ${{ !inputs.skip_notarization }}
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          GH_TOKEN: ${{ secrets.RELEASE_PAT }}
        run: |
          echo "🔏 Signing and notarizing desktop app..."
          echo "This may take 5-10 minutes for notarization..."
          npx nx run desktop:package-dist
          echo "✅ Signing and notarization completed!"

      - name: List Build Artifacts
        run: |
          echo "📦 Build artifacts created:"
          ls -lah apps/desktop/release/ || echo "No release directory found"

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: desktop-build-test-${{ github.run_number }}
          path: |
            apps/desktop/release/*.dmg
            apps/desktop/release/*.zip
            apps/desktop/release/mac/*.app
          retention-days: 7
          if-no-files-found: warn

      - name: Cleanup Keychain
        if: always()
        run: |
          echo "🧹 Cleaning up..."
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          if [ -f "$KEYCHAIN_PATH" ]; then
            security delete-keychain "$KEYCHAIN_PATH" || true
          fi
          rm -f $RUNNER_TEMP/certificate.p12
          echo "✅ Cleanup completed!"

      - name: Test Summary
        if: always()
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🎉 Test Workflow Complete!"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""
          echo "✅ What was tested:"
          echo "  • Certificate import and keychain setup"
          echo "  • Desktop app build process"
          echo "  • Code signing with Developer ID"
          if [ "${{ inputs.skip_notarization }}" = "false" ]; then
            echo "  • Apple notarization"
          else
            echo "  • (Notarization was skipped)"
          fi
          echo "  • Signature verification"
          echo ""
          echo "📦 Artifacts have been uploaded for download"
          echo ""
          echo "💡 Next steps:"
          echo "  1. Download the artifacts to test the DMG"
          echo "  2. Try installing on a Mac to verify"
          echo "  3. Check for any security warnings"
          echo ""

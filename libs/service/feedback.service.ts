import { CommandContext, Interactor } from '../model'
import { AgentService } from '../agent'
import { AiThread } from '../ai-thread/ai-thread'

export class FeedbackService {
  constructor(
    private interactor: Interactor,
    private agentService: AgentService
  ) {}

  async processFeedback(params: {
    messageId: string,
    agentName: string,
    feedback: 'positive' | 'negative',
    aiThread: AiThread,
    context: CommandContext
  }): Promise<void> {
    const { messageId, agentName, feedback, aiThread, context } = params

    try {
      // 1. Obtenir l'agent
      const agent = await this.agentService.findByName(agentName, context)
      if (!agent) {
        this.interactor.error(`Agent ${agentName} not found`)
        return
      }

      // 2. V√©rifier que l'agent a acc√®s aux memory tools
      // Pour simplifier, nous essaierons d'utiliser les memory tools
      // L'agent √©chouera naturellement s'il n'y a pas acc√®s

      // 3. Demander des d√©tails √† l'utilisateur
      const promptMessage = feedback === 'negative' 
        ? "Qu'est-ce qui pourrait √™tre am√©lior√© dans cette r√©ponse ?"
        : "Qu'est-ce qui √©tait particuli√®rement utile dans cette r√©ponse ?"
      
      const details = await this.interactor.promptText(promptMessage)
      if (!details) {
        this.interactor.displayText('Feedback cancelled')
        return
      }

      // 4. Fork du thread et pr√©parer le contexte
      const forkedThread = aiThread.fork(agentName)
      
      // 5. Construire le prompt de curation adapt√©
      const curationPrompt = await this.buildCurationPrompt(
        messageId, 
        details, 
        feedback, 
        forkedThread
      )

      // 6. Ex√©cuter l'agent dans le thread fork√© (pas de merge)
      this.interactor.displayText(`üîÑ Processing ${feedback} feedback for agent ${agentName}...`)
      await agent.run(curationPrompt, forkedThread)
      
      this.interactor.displayText('‚úÖ Feedback processed successfully')
    } catch (error: any) {
      console.error('Error processing feedback:', error)
      this.interactor.error(`Error processing feedback: ${error.message}`)
    }
  }

  private async buildCurationPrompt(
    messageId: string, 
    userFeedback: string, 
    feedbackType: 'positive' | 'negative',
    thread: AiThread
  ): Promise<string> {
    // Obtenir tout le contexte jusqu'au message concern√©
    const messagesResult = await thread.getMessages(undefined, undefined)
    const allMessages = messagesResult.messages
    const messageIndex = allMessages.findIndex((m: any) => m.timestamp === messageId)
    
    if (messageIndex === -1) {
      throw new Error(`Message ${messageId} not found in thread`)
    }

    // Contexte = tous les messages jusqu'√† celui concern√© inclus
    const contextMessages = allMessages.slice(0, messageIndex + 1)
    
    if (feedbackType === 'positive') {
      return `Tu as re√ßu un retour positif sur l'une de tes r√©ponses. L'utilisateur souhaite renforcer ce type d'approche.

Contexte complet de la conversation jusqu'√† ta r√©ponse:
<context>
${this.formatMessages(contextMessages)}
</context>

Retour positif de l'utilisateur:
"${userFeedback}"

Analyse ce retour et identifie les √©l√©ments qui ont √©t√© appr√©ci√©s. Si tu identifies des patterns ou approches qui m√©riteraient d'√™tre renforc√©s pour des situations similaires futures, utilise l'outil memorize pour les capturer.

Important:
- Ne sur-g√©n√©ralise pas √† partir d'un seul exemple
- Reste nuanc√© et √©vite de devenir r√©p√©titif
- Focus sur les principes utiles plut√¥t que sur des d√©tails sp√©cifiques`
    } else {
      return `Tu as re√ßu un retour constructif sur l'une de tes r√©ponses. L'utilisateur sugg√®re une am√©lioration.

Contexte complet de la conversation jusqu'√† ta r√©ponse:
<context>
${this.formatMessages(contextMessages)}
</context>

Suggestion d'am√©lioration de l'utilisateur:
"${userFeedback}"

Analyse ce retour et identifie ce qui pourrait √™tre am√©lior√© dans ton approche. Si tu identifies des patterns ou comportements qui devraient √™tre ajust√©s, utilise l'outil memorize pour capturer ces apprentissages.

Important:
- Reste √©quilibr√© dans tes ajustements
- Ne sur-corrige pas au point de perdre tes forces existantes
- Focus sur des am√©liorations actionnables et contextuelles
- √âvite les g√©n√©ralisations excessives`
    }
  }

  private formatMessages(messages: any[]): string {
    return messages.map(m => {
      const role = m.role || 'unknown'
      let content = ''
      
      if (typeof m.content === 'string') {
        content = m.content
      } else if (Array.isArray(m.content)) {
        // Handle rich content format
        content = m.content
          .filter((c: any) => c.type === 'text')
          .map((c: any) => c.content)
          .join('\n')
      } else {
        content = JSON.stringify(m.content)
      }
      
      return `${role}: ${content}`
    }).join('\n\n')
  }
}